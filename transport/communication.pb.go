// Code generated by protoc-gen-go. DO NOT EDIT.
// source: communication.proto

package transport

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	// Unique message Id
	MsgId uint64 `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`
	// Object to call a method on
	ObjectPath string `protobuf:"bytes,2,opt,name=objectPath,proto3" json:"objectPath,omitempty"`
	// Remote method to call
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// Arguments are encoded into a CBOR list
	Arguments            []byte   `protobuf:"bytes,4,opt,name=arguments,proto3" json:"arguments,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_communication_efb86787ad11ef0f, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMsgId() uint64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *Request) GetObjectPath() string {
	if m != nil {
		return m.ObjectPath
	}
	return ""
}

func (m *Request) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Request) GetArguments() []byte {
	if m != nil {
		return m.Arguments
	}
	return nil
}

type Response struct {
	// Unique message Id
	MsgId uint64 `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`
	// Response information encoded into a CBOR list
	Response             []byte   `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_communication_efb86787ad11ef0f, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMsgId() uint64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *Response) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "protobuf.Request")
	proto.RegisterType((*Response)(nil), "protobuf.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KernelSyscallClient is the client API for KernelSyscall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KernelSyscallClient interface {
	Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (KernelSyscall_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (KernelSyscall_ClientStreamClient, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (KernelSyscall_StreamClient, error)
}

type kernelSyscallClient struct {
	cc *grpc.ClientConn
}

func NewKernelSyscallClient(cc *grpc.ClientConn) KernelSyscallClient {
	return &kernelSyscallClient{cc}
}

func (c *kernelSyscallClient) Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.KernelSyscall/call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kernelSyscallClient) ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (KernelSyscall_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KernelSyscall_serviceDesc.Streams[0], "/protobuf.KernelSyscall/serverStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelSyscallServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KernelSyscall_ServerStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type kernelSyscallServerStreamClient struct {
	grpc.ClientStream
}

func (x *kernelSyscallServerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kernelSyscallClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (KernelSyscall_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KernelSyscall_serviceDesc.Streams[1], "/protobuf.KernelSyscall/clientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelSyscallClientStreamClient{stream}
	return x, nil
}

type KernelSyscall_ClientStreamClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type kernelSyscallClientStreamClient struct {
	grpc.ClientStream
}

func (x *kernelSyscallClientStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kernelSyscallClientStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kernelSyscallClient) Stream(ctx context.Context, opts ...grpc.CallOption) (KernelSyscall_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KernelSyscall_serviceDesc.Streams[2], "/protobuf.KernelSyscall/stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &kernelSyscallStreamClient{stream}
	return x, nil
}

type KernelSyscall_StreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type kernelSyscallStreamClient struct {
	grpc.ClientStream
}

func (x *kernelSyscallStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kernelSyscallStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KernelSyscallServer is the server API for KernelSyscall service.
type KernelSyscallServer interface {
	Call(context.Context, *Request) (*Response, error)
	ServerStream(*Request, KernelSyscall_ServerStreamServer) error
	ClientStream(KernelSyscall_ClientStreamServer) error
	Stream(KernelSyscall_StreamServer) error
}

func RegisterKernelSyscallServer(s *grpc.Server, srv KernelSyscallServer) {
	s.RegisterService(&_KernelSyscall_serviceDesc, srv)
}

func _KernelSyscall_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KernelSyscallServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.KernelSyscall/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KernelSyscallServer).Call(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _KernelSyscall_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KernelSyscallServer).ServerStream(m, &kernelSyscallServerStreamServer{stream})
}

type KernelSyscall_ServerStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type kernelSyscallServerStreamServer struct {
	grpc.ServerStream
}

func (x *kernelSyscallServerStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _KernelSyscall_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KernelSyscallServer).ClientStream(&kernelSyscallClientStreamServer{stream})
}

type KernelSyscall_ClientStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type kernelSyscallClientStreamServer struct {
	grpc.ServerStream
}

func (x *kernelSyscallClientStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kernelSyscallClientStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KernelSyscall_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KernelSyscallServer).Stream(&kernelSyscallStreamServer{stream})
}

type KernelSyscall_StreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type kernelSyscallStreamServer struct {
	grpc.ServerStream
}

func (x *kernelSyscallStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kernelSyscallStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _KernelSyscall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.KernelSyscall",
	HandlerType: (*KernelSyscallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "call",
			Handler:    _KernelSyscall_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "serverStream",
			Handler:       _KernelSyscall_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "clientStream",
			Handler:       _KernelSyscall_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "stream",
			Handler:       _KernelSyscall_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "communication.proto",
}

func init() { proto.RegisterFile("communication.proto", fileDescriptor_communication_efb86787ad11ef0f) }

var fileDescriptor_communication_efb86787ad11ef0f = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x8f, 0x41, 0x4b, 0xc4, 0x30,
	0x14, 0x84, 0x8d, 0xd6, 0xda, 0x3e, 0xeb, 0xc1, 0x28, 0x52, 0x16, 0x91, 0xd2, 0x53, 0x4f, 0x75,
	0x51, 0x3c, 0x08, 0x9e, 0xbc, 0x89, 0x17, 0xc9, 0xde, 0xbc, 0xa5, 0xdd, 0xe7, 0x6e, 0xa5, 0x49,
	0x6a, 0xf2, 0x22, 0xf8, 0xa3, 0xfd, 0x0f, 0x62, 0xb6, 0xea, 0x5e, 0x84, 0xdd, 0xd3, 0x63, 0x26,
	0xf3, 0x65, 0x18, 0x38, 0x69, 0x8d, 0x52, 0x5e, 0x77, 0xad, 0xa4, 0xce, 0xe8, 0x7a, 0xb0, 0x86,
	0x0c, 0x4f, 0xc2, 0x69, 0xfc, 0x4b, 0xe9, 0xe1, 0x40, 0xe0, 0x9b, 0x47, 0x47, 0xfc, 0x14, 0xf6,
	0x95, 0x5b, 0x3c, 0xcc, 0x73, 0x56, 0xb0, 0x2a, 0x12, 0x2b, 0xc1, 0x2f, 0x00, 0x4c, 0xf3, 0x8a,
	0x2d, 0x3d, 0x49, 0x5a, 0xe6, 0xbb, 0x05, 0xab, 0x52, 0xb1, 0xe6, 0xf0, 0x33, 0x88, 0x15, 0xd2,
	0xd2, 0xcc, 0xf3, 0xbd, 0xf0, 0x36, 0x2a, 0x7e, 0x0e, 0xa9, 0xb4, 0x0b, 0xaf, 0x50, 0x93, 0xcb,
	0xa3, 0x82, 0x55, 0x99, 0xf8, 0x33, 0xca, 0x3b, 0x48, 0x04, 0xba, 0xc1, 0x68, 0x87, 0xff, 0xf4,
	0x4e, 0x20, 0xb1, 0x63, 0x22, 0xb4, 0x66, 0xe2, 0x57, 0x5f, 0x7d, 0x32, 0x38, 0x7a, 0x44, 0xab,
	0xb1, 0x9f, 0x7d, 0xb8, 0x56, 0xf6, 0x3d, 0xbf, 0x84, 0x28, 0xdc, 0xe3, 0xfa, 0x67, 0x59, 0x3d,
	0xce, 0x9a, 0xf0, 0x75, 0x6b, 0xf5, 0x41, 0xb9, 0xc3, 0x6f, 0x21, 0x73, 0x68, 0xdf, 0xd1, 0xce,
	0xc8, 0xa2, 0x54, 0x1b, 0x83, 0x53, 0xf6, 0x8d, 0xb6, 0x7d, 0x87, 0x9a, 0xb6, 0x44, 0x2b, 0xc6,
	0x6f, 0x20, 0x76, 0xdb, 0x42, 0x53, 0x76, 0x7f, 0xf8, 0x9c, 0x92, 0x95, 0xda, 0x0d, 0xc6, 0x52,
	0x13, 0x87, 0xd4, 0xf5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x30, 0x77, 0x90, 0xd9, 0x01,
	0x00, 0x00,
}
